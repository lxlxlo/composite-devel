#
# Hydrogen build script
#

# vim: set filetype=python
# kate: syntax python

import urllib
import os
import subprocess
import sys
import glob

def printStatus( value ):
    if value:
	return "enabled"
    else:
	return "disabled"

def recursiveDirs(root) :
	return filter( ( lambda a : a.rfind( ".svn") == -1 ),  [ a[0] for a in os.walk( root ) ] )

def unique( list ) :
	return dict.fromkeys( list ).keys()

def scanFiles(dir, accept=[ "*.cpp" ], reject=[] ) :
	sources = []
	paths = recursiveDirs( dir )
	for path in paths:
		for pattern in accept:
			sources += glob.glob( path + "/" + pattern )
	for pattern in reject:
		sources = filter( ( lambda a : a.rfind( pattern ) == -1 ),  sources )
	return unique( sources )

def subdirsContaining( root, patterns ):
	dirs = unique( map( os.path.dirname, scanFiles( root, patterns ) ) )
	dirs.sort()
	return dirs



def get_platform_flags():
	includes = []
	cppflags = []
	ldflags = []

	if sys.platform == "linux2" or sys.platform == "darwin":
		if debug:
			cppflags += ['-Wall',  '-g2', '-ggdb', '-O0']
		else:
			cppflags += ['-O3', '-fomit-frame-pointer', '-funroll-loops']
			#cppflags += " %s" % get_optimized_flags( target_cpu )

		if alsa: cppflags.append('-DALSA_SUPPORT')
		if jack: cppflags.append('-DJACK_SUPPORT')
		if lash: cppflags.append('-DLASH_SUPPORT')
                if lrdf: cppflags.append('-DLRDF_SUPPORT')
		if portaudio: cppflags.append('-DPORTAUDIO_SUPPORT')
		if portmidi: cppflags.append('-DPORTMIDI_SUPPORT')


		cppflags.append('-DFLAC_SUPPORT')
		cppflags.append('-DLADSPA_SUPPORT')
		cppflags.append('-DOSS_SUPPORT')


		includes.append( '/usr/lib/lash-1.0' )

	if libarchive: cppflags.append('-DLIBARCHIVE_SUPPORT')

	includes.append( './' )
	includes.append( 'gui/src/' )
	includes.append( '3rdparty/install/include' )

	if sys.platform == 'linux2':
		ldflags.append('-lasound')

	elif sys.platform == 'darwin':
		pass
	elif sys.platform == "win32":
		includes.append( '3rdparty\install\include' )
		includes.append( 'build\pthreads\include' )
		includes.append( '3rdparty\libarchive\include' )
		includes.append( 'windows\timeFix' )
	else:
		raise Exception( "Platform '%s' not supported" % sys.platform )

	return (includes, cppflags, ldflags)



def download_3rdparty_libs():
	print " * Downloading required 3rdparty libraries"

	curdir = os.path.abspath( os.path.curdir )

	if sys.platform != "win32":
		prefix = os.path.abspath( os.path.curdir ) + "/3rdparty/install"
	else:
		prefix = os.path.abspath( os.path.curdir ) + "\3rdparty\install"


	compile_flags = "--enable-static --disable-shared"


	if not os.path.exists( "3rdparty" ):
		os.mkdir( "3rdparty" )

	if not os.path.exists( "3rdparty/install" ):
		os.mkdir( "3rdparty/install" )

	if not os.path.exists( "3rdparty/install/lib" ):
		os.mkdir( "3rdparty/install/lib" )




	if not os.path.exists( "3rdparty/libsndfile.tar.gz" ) and not os.path.exists("3rdparty/libsndfile.zip"):
		if sys.platform != "win32":
			print " * Downloading libsndfile.tar.gz"
			urllib.urlretrieve("http://www.mega-nerd.com/libsndfile/libsndfile-1.0.17.tar.gz", "3rdparty/libsndfile.tar.gz")
		else:
			print " * Downloading libsndfile.zip"
			urllib.urlretrieve("http://www.mega-nerd.com/libsndfile/libsndfile-1_0_17.zip", "3rdparty/libsndfile.zip")


	if sys.platform != "win32":
		#unix commands
		if not os.path.exists( "3rdparty/install/lib/libsndfile.a" ):
			Execute( "cd 3rdparty; tar xzf libsndfile.tar.gz" )
			Execute( "cd 3rdparty/libsndfile-1.0.17; ./configure --disable-flac --prefix=%s %s" % (prefix, compile_flags) )
			res = Execute( "cd 3rdparty\libsndfile-1.0.17; make -j2; make install" )
			if res != 0:
				raise Exception( "Error compiling 3rdparty libraries" )
	else:
		#windows
		if not os.path.exists( "3rdparty\install\lib\libsndfile-1.dll" ):
			Execute( "unzip 3rdparty\libsndfile.zip -d 3rdparty" )
			Execute( "copy 3rdparty\libsndfile-1_0_17\libsndfile-1.dll 3rdparty\install\lib")
			Execute( "copy 3rdparty\libsndfile-1_0_17\sndfile.h 3rdparty\install\lib")




def get_svn_revision():
	p = subprocess.Popen("svnversion -n", shell=True, stdout=subprocess.PIPE)
	return p.stdout.read()



def get_hydrogen_lib():
	includes, cppflags, ldflags = get_platform_flags()

	includes.append( "libs/hydrogen/include" )
	includes.append( "/usr/include/lash-1.0")

	#location of qt4.py
	qt4ToolLocation="."

	env = Environment(tools=['default','qt4'], toolpath=[qt4ToolLocation], ENV=os.environ, CPPPATH = includes, CPPFLAGS = cppflags, CCFLAGS = "", LINKFLAGS=ldflags )
	env.EnableQt4Modules( ['QtCore', 'QtGui'], debug=False)
	env.CacheDir( "scons_cache" )
	

	#env.Decider is not known in older scons version
	try:
		env.Decider( "MD5-timestamp" )
	except AttributeError:
		env.SourceSignatures('MD5')


	if jack:
            env.ParseConfig('pkg-config --modversion jack', get_jack_midi_api_version)    

	src = scanFiles( "libs/hydrogen", ['*.cpp', '*.cc', '*.c' ], [ 'moc_'] )
	src.append( "version.cpp" )

	static_lib = env.StaticLibrary(target = 'hydrogen', source = src )
	return static_lib


def get_hydrogen_gui( lib_hydrogen ):
	includes, cppflags, ldflags = get_platform_flags()

	includes.append( "libs/hydrogen/include" )
	includes.append( "gui/src/UI" )
	includes.append( "/usr/include/lash-1.0")

	#location of qt4.py
	qt4ToolLocation="."

	env = Environment(tools=['default','qt4'], toolpath=[qt4ToolLocation], ENV=os.environ, CPPPATH = includes, CPPFLAGS = cppflags, CCFLAGS = "", LINKFLAGS=ldflags )
	
	#hi, can't compile h2 with Qt3Support on my linux machines anymore (debian unstable & ubuntu )
	#, although i have correct installed "libqt4-qt3support"
	#after correct one error into SoundLibraryPanal.cpp i get linking or what ever errors (sorry never seen before) after compiling. 
	#so, think it is better to disable qt3 support for now
	#
	#env.EnableQt4Modules( ['QtCore', 'QtGui','QtNetwork','QtXml','Qt3Support'], debug=False)
	#
	env.EnableQt4Modules( ['QtCore', 'QtGui','QtNetwork','QtXml'], debug=False)
	#
	env.CacheDir( "scons_cache" )
	
	#env.Decider is not known in older scons version
	try:
		env.Decider( "MD5-timestamp" )
	except AttributeError:
		env.SourceSignatures('MD5')

	# rcc needs a -name flag because examples use identified resource files
	def takebasename(file):
		return os.path.splitext(os.path.basename(file))[0]


	directory = "gui"

	resources = [ env.Qrc( qrc, QT4_QRCFLAGS = '-name ' + takebasename( qrc ) ) for qrc in scanFiles(directory, ['*.qrc'] ) ]
	interfaces = [ env.Uic4( uic ) for uic in scanFiles(directory, ['*.ui'] ) ]


	src = scanFiles( directory, ['*.cpp', '*.cc', '*.c' ], [ 'moc_'] )

	env.Append( LIBS = lib_hydrogen )
	env.Append( LIBS = ["sndfile"] )
	
	if lrdf: env.Append( LIBS = ["lrdf"] )
	if flac: env.Append( LIBS = ["FLAC","FLAC++"] )
	if lash: env.Append( LIBS = ["lash"])
	if jack:
            env.Append( LIBS = ["jack"])
            env.ParseConfig('pkg-config --modversion jack', get_jack_midi_api_version)    
	if alsa: env.Append( LIBS = ["asound"])
	if libarchive: env.Append( LIBS = ["archive"])
	else: env.Append( LIBS = ["tar"])
	if portaudio: env.Append( LIBS = [ "portaudio" ] )
	if portmidi: 
		env.Append( LIBS = [ "portmidi" ] )
		env.Append( LIBS = [ "porttime" ] )
	env.Append( LIBPATH = '3rdparty\libsndfile-1_0_17' )
	env.Append( LIBPATH = 'build\pthreads\lib' )

	app = env.Program(target = 'hydrogen', source = src )

	env.Alias('programs', app)
	env.Default('programs')

	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/i18n"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/img"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/drumkits"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/demo_songs"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/hydrogen.default.conf"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/emptySample.wav"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/click.wav"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/doc"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/share/hydrogen/data', source="./data/DefaultSong.h2song"))
	env.Alias(target="install", source=env.Install(dir= destdir + install_prefix + '/bin/', source="./hydrogen"))

	return app



opts = Options()

#platform independent settings
opts.Add('debug', 'Set to 1 to build with debug informations', 0)
opts.Add('libarchive', 'Set to 1 to enable libarchive instead of libtar', 0)
opts.Add('prefix','Default: /usr/local',"/usr/local")
opts.Add('destdir','Default: none',"")

#platform dependent settings
if sys.platform != "win32":
	opts.Add('portmidi', 'Set to 1 to enable portmidi',0)
	portmidi = int(ARGUMENTS.get('portmidi',0))
	
	opts.Add('portaudio', 'Set to 1 to enable portaudio',0)
	portaudio = int(ARGUMENTS.get('portaudio',0))
	
	opts.Add('lash', 'Set to 1 to enable lash',0)
	lash = int(ARGUMENTS.get('lash',0))
	
	
	opts.Add('alsa', 'Set to 1 to enable alsa',1)
	alsa = int(ARGUMENTS.get('alsa',1))
	

	opts.Add('jack', 'Set to 1 to enable jack',1)	
	jack = int(ARGUMENTS.get('jack',1))
	

	opts.Add('lrdf', 'Set to 1 to enable lrdf',1)
	lrdf = int(ARGUMENTS.get('lrdf',1))
	

	opts.Add('flac', 'Set to 1 to enable flac',1)
	flac = int(ARGUMENTS.get('flac',1))

else:
	#alsa, lash and jack are not available on windows
	opts.Add('portmidi', 'Set to 1 to enable portmidi',1)
	
	opts.Add('portaudio', 'Set to 1 to enable portaudio',1)
	portaudio = int(ARGUMENTS.get('portaudio',1))
	
	opts.Add('lash', 'Set to 1 to enable lash',0)
	lash = int(ARGUMENTS.get('lash',0))
	

	opts.Add('alsa', 'Set to 1 to enable alsa',0)
	alsa = int(ARGUMENTS.get('alsa',0))
	

	opts.Add('jack', 'Set to 1 to enable jack',0)
	jack = int(ARGUMENTS.get('jack',0))
	
	opts.Add('lrdf', 'Set to 1 to enable lrdf',0)
	lrdf = int(ARGUMENTS.get('lrdf',0))
	
	opts.Add('flac', 'Set to 1 to enable flac',0)
	flac = int(ARGUMENTS.get('flac',0))

# JACK MIDI version detection.
def get_jack_midi_api_version(xenv, pkg_ver):
    global jack_midi
    rv = ""
    (major, minor, patch) = pkg_ver.rstrip().split('.')
    major = int(major)
    minor = int(minor)
    patch = int(patch)
    if major != 0:
        return rv
    if minor < 102:
        return rv
    rv = "-DJACK_MIDI_SUPPORT"
    jack_midi = 1
    if (minor == 102) and (patch <= 26):
        rv += " -DJACK_MIDI_0_102_0"
    elif (minor < 104):
        rv += " -DJACK_MIDI_0_102_27"
    elif (minor == 104) and (patch == 0):
        rv += " -DJACK_MIDI_0_102_27"
    elif (minor >= 105):
        rv += " -DJACK_MIDI_0_105_0"
    xenv.MergeFlags(rv)

debug =int(ARGUMENTS.get('debug', 0))
libarchive = int(ARGUMENTS.get('libarchive', 0))

install_prefix = ARGUMENTS.get('prefix',"/usr/local")
destdir = ARGUMENTS.get('destdir',"")


#get includes ( important if you compile on non-standard envorionments)
includes, a , b = get_platform_flags()
env = Environment(options = opts, CPPPATH = includes)

Help(opts.GenerateHelpText(env))


platform = sys.platform

#just download 3rd party libs if we're *not* running linux.
#We trust in our package managment system!
if platform == "darwin" or platform == "win32":
    download_3rdparty_libs()



#Check if all required libraries are installed
conf = Configure(env)
if not conf.CheckCHeader('sndfile.h'):
    print 'libsndfile must be installed!'
    Exit(1)



# it seems that conf.CheckCHeader  dislikes like the "++" in filenames
#if not conf.CheckCHeader('FLAC++/all.h'):
#   print 'FLAC++ must be installed!'
#   Exit(1)


# these libraries are optional (can be enabled/disabled, see 'scons -h')

#alsa: (default: enabled)
if alsa and not conf.CheckCHeader('alsa/asoundlib.h'):
    print 'alsa must be installed!'
    Exit(1)

#jack: (default: enabled)
if jack and not conf.CheckCHeader('jack/jack.h'):
    print 'jack must be installed!'
    Exit(1)

#jack_midi: (default: enabled if jack is)
if jack and conf.CheckCHeader('jack/midiport.h'):
    jack_midi = 1

#lash: (default: disabled)
if lash and not os.path.isdir("/usr/include/lash-1.0"):
    print 'liblash must be installed!'
    Exit(1)

#libarchive: (default: disabled)
if libarchive and not conf.CheckCHeader("archive.h"):
    print 'libarchive must be installed!'
    Exit(1)
#libtar: needed if not libarchive
elif not libarchive and not conf.CheckCHeader("zlib.h"):
    print 'zlib devel package must be installed!'
    Exit(1)
elif not libarchive and not conf.CheckCHeader("libtar.h"):
    print 'libtar must be installed!'
    Exit(1)

#lrdf: categorizing of ladspa effects
if lrdf and not conf.CheckCHeader('lrdf.h'):
    print 'lrdf must be installed!'
    Exit(1)

#flac: support for flac samples
if flac and not conf.CheckCHeader('FLAC/all.h'):
    print 'FLAC must be installed!'
    Exit(1)



print ""
print "================================================================="
print " Hydrogen build script"
print ""
print " Revision: %s" % get_svn_revision()
print " Platform: %s" % platform

if debug:
	print " Debug build"
else:
	print " Release build"

print " Prefix: " + install_prefix
print " Destdir: " + destdir
print "================================================================="
print "Feature Overview:\n"

print "      lash: " + printStatus( lash )
print "      alsa: " + printStatus( alsa )
print "      jack: " + printStatus( jack )
print " jack_midi: " + printStatus( jack_midi )
print "libarchive: " + printStatus( libarchive ) + (' (using libtar instead)', '')[libarchive]
print " portaudio: " + printStatus( portaudio )
print "  portmidi: " + printStatus( portmidi ) 

print "\n================================================================="
print ""


# write the config.h file
conf = open("config.h", "w")

conf.write( "#ifndef HYD_CONFIG_H\n" )
conf.write( "#define HYD_CONFIG_H\n" )
conf.write( "#include <string>\n" )


if debug: conf.write( "#define CONFIG_DEBUG\n" )
if lash: conf.write( "#define LASH\n" )

conf.write( "#ifndef QT_BEGIN_NAMESPACE\n" )
conf.write( "#    define QT_BEGIN_NAMESPACE\n" )
conf.write( "#endif\n" )
conf.write( "#ifndef QT_END_NAMESPACE\n" )
conf.write( "#    define QT_END_NAMESPACE\n" )
conf.write( "#endif\n" )

conf.write( "#define CONFIG_PREFIX \"%s\"\n" % install_prefix )
conf.write( "#define DATA_PATH \"%s/share/hydrogen/data\"\n" % install_prefix )

conf.write( "#endif\n" )

conf.close()

version = open("version.cpp", "w")
version.write( "// autogenerated by Sconstruct script\n" )
version.write( '#include "version.h"\n' )
version.write( '#include "config.h"\n' )
version.write( "static const std::string extra_version = \"svn%s\";\n" % get_svn_revision() )
version.write( "static const std::string VERSION = \"0.9.4-\" + extra_version;\n" )
version.write( "std::string get_version() { return VERSION;	}\n" )
version.close()

libhyd = get_hydrogen_lib()
app = get_hydrogen_gui( libhyd )
