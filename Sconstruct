#
# Hydrogen build script
#

# vim: set filetype=python
# kate: syntax python

import urllib
import os
import subprocess
import sys
import glob

def recursiveDirs(root) :
	return filter( ( lambda a : a.rfind( ".svn") == -1 ),  [ a[0] for a in os.walk( root ) ] )

def unique( list ) :
	return dict.fromkeys( list ).keys()

def scanFiles(dir, accept=[ "*.cpp" ], reject=[] ) :
	sources = []
	paths = recursiveDirs( dir )
	for path in paths:
		for pattern in accept:
			sources += glob.glob( path + "/" + pattern )
	for pattern in reject:
		sources = filter( ( lambda a : a.rfind( pattern ) == -1 ),  sources )
	return unique( sources )

def subdirsContaining( root, patterns ):
	dirs = unique( map( os.path.dirname, scanFiles( root, patterns ) ) )
	dirs.sort()
	return dirs



def get_platform_flags():
	includes = []
	cppflags = ""
	ldflags = ""

	if sys.platform == "linux2" or sys.platform == "darwin":
		if debug_build:
			cppflags += " -Wall -g2 -ggdb -O0"
		else:
			cppflags += " -O3 -fomit-frame-pointer -funroll-loops"
			cppflags += " %s" % get_optimized_flags( target_cpu )

	includes.append( './' )
	includes.append( '3rdparty/install/include' )

	if sys.platform == 'linux2':
		pass
	elif sys.platform == 'darwin':
		pass
	else:
		raise Exception( "Platform '%s' not supported" % sys.platform )

	return (includes, cppflags, ldflags)



def download_3rdparty_libs():
	print " * Downloading required 3rdparty libraries"

	curdir = os.path.abspath( os.path.curdir )
	prefix = os.path.abspath( os.path.curdir ) + "/3rdparty/install"

	compile_flags = "--enable-static --disable-shared"


	if not os.path.exists( "3rdparty" ):
		os.mkdir( "3rdparty" )

	if not os.path.exists( "3rdparty/install" ):
		os.mkdir( "3rdparty/install" )


	if not os.path.exists( "3rdparty/libsndfile.tar.gz" ):
		print " * Downloading libsndfile"
		urllib.urlretrieve("http://www.mega-nerd.com/libsndfile/libsndfile-1.0.17.tar.gz", "3rdparty/libsndfile.tar.gz")
		
	
	if not os.path.exists( "3rdparty/install/lib/libsndfile.a" ):
		Execute( "cd 3rdparty; tar xzf libsndfile.tar.gz" )
		Execute( "cd 3rdparty/libsndfile-1.0.17; ./configure --disable-flac --prefix=%s %s" % (prefix, compile_flags) )
		res = Execute( "cd 3rdparty/libsndfile-1.0.17; make -j2; make install" )
		if res != 0:
			raise Exception( "Error compiling 3rdparty libraries" )



def get_svn_revision():
	p = subprocess.Popen("svnversion -n", shell=True, stdout=subprocess.PIPE)
	return p.stdout.read()



def get_hydrogen_lib():
	includes, cppflags, ldflags = get_platform_flags()

	includes.append( "libs/hydrogen/include" )

	qt4ToolLocation='.'
	env = Environment(tools=['default','qt4'], toolpath=[qt4ToolLocation], ENV=os.environ, CPPPATH = includes, CPPFLAGS = cppflags, CCFLAGS = "", LINKFLAGS=ldflags )
	env.EnableQt4Modules( ['QtCore', 'QtGui'], debug=False)
	env.CacheDir( "scons_cache" )


	src = scanFiles( "libs/hydrogen", ['*.cpp', '*.cc', '*.c' ], [ 'moc_'] )

	static_lib = env.StaticLibrary(target = 'hydrogen', source = src )
	return static_lib


def get_hydrogen_gui( lib_hydrogen ):
	includes, cppflags, ldflags = get_platform_flags()

	includes.append( "libs/hydrogen/include" )
	includes.append( "gui/src/UI" )

	qt4ToolLocation='.'
	env = Environment(tools=['default','qt4'], toolpath=[qt4ToolLocation], ENV=os.environ, CPPPATH = includes, CPPFLAGS = cppflags, CCFLAGS = "", LINKFLAGS=ldflags )
	env.EnableQt4Modules( ['QtCore', 'QtGui', 'QtNetwork', 'QtXml' ], debug=False)
	env.CacheDir( "scons_cache" )

	# rcc needs a -name flag because examples use identified resource files
	def takebasename(file):
		return os.path.splitext(os.path.basename(file))[0]


	directory = "gui"

	resources = [ env.Qrc( qrc, QT4_QRCFLAGS = '-name ' + takebasename( qrc ) ) for qrc in scanFiles(directory, ['*.qrc'] ) ]
	interfaces = [ env.Uic4( uic ) for uic in scanFiles(directory, ['*.ui'] ) ]


	src = scanFiles( directory, ['*.cpp', '*.cc', '*.c' ], [ 'moc_'] )

	env.Append( LIBS = lib_hydrogen )
	env.Append( LIBS = ["sndfile"] )
	env.Append( LIBS = ["tar"] )

	#app = env.Program(target = 'hydrogengui', source = src, LIBS = libs )
	app = env.Program(target = 'hydrogengui', source = src )


	env.Alias('programs', app)
	env.Default('programs')
	return app



debug_build = True


print ""
print "================================================================="
print " Hydrogen build script"
print ""
print " Revision: %s" % get_svn_revision()
print " Platform: %s" % sys.platform
if debug_build:
	print " Debug build"
else:
	print " Release build"
print "================================================================="
print ""


download_3rdparty_libs()

libhyd = get_hydrogen_lib()
app = get_hydrogen_gui( libhyd )

